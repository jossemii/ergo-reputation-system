

---------------------------------------------------
Borrador de sistema de reputación en Ergo.         
---------------------------------------------------
---------------------------------------------------




Para asignar reputación a -> R5:

- Boxes (dentro de ergo)

y a objetos externos -> R6:
- direcciones
- urls
- repositiorios de Git
- .....



Los árboles de reputación son conjuntos de Boxes, donde:
- la raiz es un Box que contiene el 100% de la reputación mediante las políticas monetarias que sean.
- las ramas Box que apuntan a otras pruebas de reputación.
- las hojas son pruebas de reputación que apuntan a objetos externos en forma de metadatos.


En principio no hay dos tipos de contrato (rama o hoja del árbol):
  - Son la misma plantilla de contrato (reputation_proof.scala)
  - Adoptan su función dentro del contexto de todo el árbol (segun sus registros, entradas y salidas).


Esquema de prueba de reputación:
  - INPUT


Interfaz de usuario:
  - Boton de generar prueba de reputación
      1. Cantidad de reputación inicial.
          O parte de la reputación de otras pruebas.
      2. Objeto al que asignarle reputación.

    * En caso de que se asigne reputación a un objeto, la UI no permitirá outputs de la reputación en su política.
       (Aunque esto si podría darse externamenete, posiblemente reduciría la calidad de la prueba de reputación).

    ** Otra opción es permitir que, aun asignando reputación a un objeto, la UI permita outputs en su política.
       De esta forma, se permite que representar que un objeto A depende x de un objeto B.    (A -> B)



Propiedades:
- Una prueba de reputación es un Box que contiene
  - un puntero a un objeto cualquiera
  - una cantidad de reputación denominada en un token
    - si el token tiene un valor asignado en los mercados se estaría realizando staking para dar valor a la prueba.
    - si el token es creado por el mismo usuario que sube la prueba tan solo daría una reputación en función de la cantidad de ese token que vaya generando.

- Cualquier usuario puede subir una prueba de reputación apuntando a un objeto cualquiera.

- Una prueba de reputación puede asignar reputación a otra prueba de reputación


Tipos de prueba de reputación:
- A un objeto off_chain (repositorio de git, url web, ...)
- A un objeto on_chain, es decir, un Box (a otra prueba de reputación,  otro contrato ...) utilizandolo como INPUT (como metadatos o no no lo se).
* Se utliza la misma plantilla (ErgoScript program), cuando contiene registros sobre un objeto, sea on-chain u off-chain,
no puede gastarse, es decir, no puede delegarse su reputación (representada mediante un token) a otra prueba de reputación.

[
  Cuando una rama del árbol de reputación asigna reputación a otra rama o hoja (prueba) lo hace mediante sus OUTPUTS,
  ya que los Boxes a los que asigna reputación serán creados despues de ella.

  Cuando una prueba de reputación (una hoja del árbol de reputación) asigna su reputación asignada, lo hace mediante sus INPUTS,
  ya que asigna a objetos ya creados antes que ella.
]


Si un usuario quiere obtener la reputación de un objeto A buscará a traves de su árbol de reputación el objeto y 
  computará la reputación total de ese objeto (en función de los parámetros de su motor de reputación [off_chain]).

{
  De esta forma no es necesario crear consenso, cada usuario asigna reputación a los agentes que cree convenientes.
  Aquellos agentes que quieran tener buena reputación tendran el incentivo de mantener la reputación de todos los usuarios,
  realizando pruebas sobre aquellos agentes a los que les asignan reputación.
}









//--------------------------------------------------------------------------------------------------------------------//

¿Como se asigna una mala reputación?:

Las pruebas de reputación (hojas del árbol de reputación) deberán indicar, a parte del objeto al que se estan refiriendo, 
  que dicen sobre él. Esto es ya mas un tema de como expresar el lenguaje dentro del Box.

  * Una posibilidad es que un registro sea un booleano, indicando la 'polaridad' de la prueba (si es positiva o negativa,
    si habla bien o mal del puntero).
    - ¿como se lleva la contabilidad a partir de alli? -> Bueno, el gasto del token siempre es el mismo. Pero el algoritmo
      computará las sumas y las restas.




¿Diferencias con oracles?:

- Los oracles requieren un consenso entre partes para poner en comun una realidad, por ejemplo, el valor de XAU/ERG en un bloque concreto (es decir, el valor del oro en un tiempo concreto).
  En contra parte, las pruebas de reputación no necesitan consenso, pero permiten a un usuario fiarse o no de ciertas cosas en funcion de los agentes que él mismo se fia. Por lo que debe de realizar un estudio previo para saber cuales
  son esos agentes. Y estos mismos agentes, deberan realizar estudios sobre a que otras partes asignan su reputación. Esto debería deribar en que un usuario comun no deba mas que asignar reputación a unas pocas partes muy bien reputadas.
  Ademas de permitirle decidir completamente que versión de la realidad se cree.

- Son sistemas distintos con aplicaciones distintas.



Expandabilidad:
- Cada rama del árbol de reputación puede tener sus propias reglas y/o políticas monetarias (las cuales podran ser juzgadas por los motores de reputación).
- Se podría permitir que, en caso de darse un evento, se permita gastar la reputación bloqueada en un Box.
   Por ejemplo:
       - Si la reserva de sigUSD cae por debajo de 400%, puede asignarse reputación ha aquellas ramas de reputación a las que se mantiene asignada reputación cualquier rama previa del árbol.

- Una prueba de reputación apunta a un contrato inteligente. Otra prueba de reputación apunta a un repositorio de Git (o a un commit concreto) que sirve como interfaz del contrato. La segunda prueba es dependiente de la primera, de forma
  que, si la reputación del contrato cae, lo hará automáticamente la reputación de la interfaz. (Esto podría realizarse con cierta estructura y políticas monetarias del árbol).


A la hora de asignar reputación a software (de menos a mas fiable):
- A una url donde se aloja (no determinista pero facil usabilidad).
- A un contenedor de Docker. (no determinista ya que hashea la construcción, pero facil usabilidad)
- A un repositorio de Git (determinista [al menos en el código, no en la máquina o arquitectura donde se ejecuta], pero compleja usabilidad).
- A un commit concreto de un repositorio de Git (mas determinista que el anterior pero con los mismos defectos)
- A un servicio de CELAUT (totalmente determinista y facil de usar |  como incomveniente, es necesario ejecutarlo mediante un nodo de CELAUT).



// --------------------------------------------------------------

ALGORITMO

El algoritmo se encarga de computar la reputación de un puntero concreto desde una prueba de reputación concreta (posiblemente desde una raiz)
- La raiz no tiene porque estar on-chain.
- Posibles parametrizaciones:
  - ....
